/** * A class of stacks whose entries are stored in a chain of nodes. * * @author Travis Chamness * @version 06/12/2019 */public final class LinkedStack<T> implements TextbookStackInterface<T>{    private Node<T> topNode; // references the first node in the chain    public LinkedStack()    {        this.topNode = null;        // TODO PROJECT #3 - Done    } // end default constructor    public void push(T newEntry)    {        this.topNode = new Node<T>(newEntry, this.topNode); //Update from book at O(1)        // TODO PROJECT #3 - Done    } // end push    public T peek() throws InsufficientNumberOfElementsOnStackException    {        if(isEmpty()){            throw new InsufficientNumberOfElementsOnStackException("Empty stack.");        }        // TODO PROJECT #3 - Done        return topNode.data;    } // end peek    public T pop() throws InsufficientNumberOfElementsOnStackException    {       T top = null;        if(this.topNode != null){            top = this.topNode.data;            this.topNode = this.topNode.next;        }else throw new InsufficientNumberOfElementsOnStackException("Reason");        // TODO PROJECT #3 - Done        return top; // THIS IS A STUB    } // end pop    public boolean isEmpty() //Returns true if empty or false if not    {        // TODO PROJECT #3 - Done        return this.topNode == null;  // THIS IS A STUB    } // end isEmpty    public void clear()    {        // TODO PROJECT #3        this.topNode = null; //kicks relationship to chain    } // end clear    public int remove(int numberOfElements)    {        int i = 0;        while(this.topNode != null && i < numberOfElements){            System.out.printf("Removing %s\n", pop());            i++;        }        // TODO PROJECT #3        return i; // THIS IS A STUB    } // end remove    public void displayStack()    {        if(this.topNode != null) {            Node<T> currentNode = this.topNode;            System.out.println("The content of the stack:");            while(currentNode != null){                System.out.printf("%s \n",currentNode.data);                currentNode = currentNode.next;            }        }else System.out.println("The stack is empty");        // TODO PROJECT #3    } // end displayStack    private class Node<S>    {        private S data; // Entry in stack        private Node<S> next; // Link to next node        private Node(S dataPortion)        {            this(dataPortion, null);        } // end constructor        private Node(S dataPortion, Node<S> linkPortion)        {            this.data = dataPortion;            this.next = linkPortion;        } // end constructor    } // end Node    public static void main(String[] args)    {        System.out.println("*** Create a stack ***");        LinkedStack<String> myStack = new LinkedStack<>();        System.out.println("--> Pushing A B C D E on the stack");        myStack.push("A");        myStack.push("B");        myStack.push("C");        myStack.push("D");        myStack.push("E");        System.out.println("Done adding 5 elements.\n");        myStack.displayStack();         //TODO PROJECT #3 - uncomment the remaining lines when peek and pop are implemented        System.out.println("\n--> Testing peek, pop, isEmpty:");        while (!myStack.isEmpty())        {            String top = myStack.peek();            System.out.println(top + " is at the top of the stack.");            top = myStack.pop();            System.out.println(top + " is removed from the stack.");        } // end while        System.out.println("--> The stack should be empty: ");        System.out.println("isEmpty() returns " + myStack.isEmpty());        try        {            String top = myStack.peek();            System.out.println(top + " is at the top of the stack.");        } catch (InsufficientNumberOfElementsOnStackException inoeose)        {            System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());        }        try        {            String top = myStack.pop();            System.out.println(top + " is at the top of the stack.");        } catch (InsufficientNumberOfElementsOnStackException inoeose)        {            System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());        }        myStack.displayStack();        System.out.println("\n--> Testing clear:");        System.out.println("--> Pushing A B C D E F G on the stack");        myStack.push("A");        myStack.push("B");        myStack.push("C");        myStack.push("D");        myStack.push("E");        myStack.push("F");        myStack.push("G");        System.out.println("Done adding 7 elements.\n");        myStack.displayStack();        System.out.println("--> Calling clear()");        myStack.clear();        myStack.displayStack();        System.out.println("\n--> Testing remove:");        System.out.println("--> Calling remove(4) on empty stack");        System.out.println(myStack.remove(4) + " elements have been removed.");        myStack.displayStack();        System.out.println("--> Pushing A B C D E F G H I J on the stack");        myStack.push("A");        myStack.push("B");        myStack.push("C");        myStack.push("D");        myStack.push("E");        myStack.push("F");        myStack.push("G");        myStack.push("H");        myStack.push("I");        myStack.push("J");        System.out.println("Done adding 10 elements.\n");        myStack.displayStack();        System.out.println("--> Calling remove(4)");        System.out.println(myStack.remove(4) + " elements have been removed.");        myStack.displayStack();        System.out.println("--> Calling remove(10)");        System.out.println(myStack.remove(10) + " elements have been removed.");        myStack.displayStack();        System.out.println("*** Done ***");    }  // end main} // end LinkedStack